/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gamestore;

import java.awt.GridLayout;
import java.awt.Image;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.event.ChangeListener;
import javafx.beans.value.ObservableValue;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.event.ChangeEvent;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Shadman
 */
public class GamerPage extends javax.swing.JFrame {
    
    static String username = "";
    static int gamerId;
    /**
     * Creates new form GamerPage
     */
    public GamerPage(String userName) {
        initComponents();
        setTitle("Gamestore-GamerPage");
        this.setLocationRelativeTo(null);
        this.username = userName;
        fillCart();
        //jLabel1.setText("Hello " + userName);
   
        jPanel5.setLayout(new GridLayout(0,3,10, 20));
        jPanel7.setLayout(new GridLayout(0,3,10, 20));
        
        setHomePage();

         addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {  
                    clearCart();
            }
        });
           
        jTabbedPane1.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                fillCart();
                setBalance();
                loadCollection();
                setHomePage();
                System.out.println();
            }
    });
 
    }                                        



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane4 = new javax.swing.JScrollPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel5 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel7 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        balanceTP = new javax.swing.JTextPane();
        jPanel4 = new javax.swing.JPanel();
        depositTF = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        depositButton = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        purchaseButton = new javax.swing.JButton();
        clearCartButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 492, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 414, Short.MAX_VALUE)
        );

        jScrollPane2.setViewportView(jPanel5);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 509, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Home", jPanel1);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 529, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 332, Short.MAX_VALUE)
        );

        jScrollPane3.setViewportView(jPanel7);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
        );

        jTabbedPane1.addTab("My Collection", jPanel2);

        jLabel2.setText("Current Account Balance(TK):");

        jScrollPane1.setViewportView(balanceTP);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(151, 151, 151)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(142, 142, 142)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(200, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(238, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Balance", jPanel3);

        jLabel3.setText("Amount");

        depositButton.setText("Deposit");
        depositButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                depositButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(107, 107, 107)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(depositButton)
                    .addComponent(depositTF, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(264, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(depositTF, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(depositButton)
                .addContainerGap(151, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Deposit", jPanel4);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(jTable1);

        purchaseButton.setText("Purchase");
        purchaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                purchaseButtonActionPerformed(evt);
            }
        });

        clearCartButton.setText("Clear Cart");
        clearCartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearCartButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(183, 183, 183)
                .addComponent(purchaseButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 133, Short.MAX_VALUE)
                .addComponent(clearCartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(purchaseButton)
                    .addComponent(clearCartButton))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Cart", jPanel6);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    private void setHomePage() 
    {                                              
             
            jPanel5.removeAll();
            try {  
             Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");  
             Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=gamestoredb;integratedSecurity=true");  
   
               Statement statement = connection.createStatement();  
               
             ResultSet rs = statement.executeQuery("SELECT  * FROM Game");  
             ResultSetMetaData  rsmetadata = rs.getMetaData(); 

             int columns = rsmetadata.getColumnCount();   

              while (rs.next()) {
                  String name, imageDirectory, price; 
                  int gameId;
                  name = rs.getString("Name");
                  imageDirectory = rs.getString("ImageDirectory");
                  price = Float.toString(rs.getFloat("Price"));
                  gameId = rs.getInt("GameId");
                  
                  Statement s = connection.createStatement();  
                  String query = "select avg(Rating) as AverageRating from Review where GameId="+gameId;
                  
                  ResultSet r = s.executeQuery(query);
                  r.next();
                  int rating = r.getInt("AverageRating");
                  
                  try {
                        Statement t = connection.createStatement();
                        ResultSet rset = t.executeQuery("select GamerId from Gamer where Username='"+username+"'");
                        rset.next();
                        gamerId = rset.getInt("GamerId"); 
                  } catch (Exception e) {
                      
                  }
       
                  
                 BufferedImage bufferedImage = null;
                    try {
                        bufferedImage = ImageIO.read(new File(imageDirectory));
                    } catch (IOException ex){
                    Logger.getLogger(Products.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                Image scaledImage = (Image) bufferedImage.getScaledInstance(147, 90, Image.SCALE_SMOOTH);
                JLabel jLabel = new JLabel(new ImageIcon(scaledImage));
                
                ProductPanel x = new ProductPanel(jLabel, name, price, rating,  this, gamerId);
                
                jPanel5.add(x);
                jPanel5.revalidate();
                jPanel5.repaint();
        
              }
 
          }
           catch (Exception e) {  
             e.printStackTrace();  
         }
    }    
    
    private void purchaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_purchaseButtonActionPerformed
        // TODO add your handling code here:
              
        float totalCost = fillCart();
        float balance = setBalance();
        if (balance>=totalCost) {
               
            try{
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");  
            Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=gamestoredb;integratedSecurity=true");  
            Statement statement = connection.createStatement();
            Statement statement1 = connection.createStatement();
            Statement statement2 = connection.createStatement();
            Statement statement3 = connection.createStatement();
            
            ResultSet games = statement.executeQuery("select Game from Cart");
            //ResultSetMetaData gameMetadata = games.getMetaData();
            //int column = gameMetadata.getColumnCount();
            
            ResultSet s = statement1.executeQuery("select GamerId from Gamer where Username='"+username+"'");
            s.next();
            int gamerId = s.getInt("GamerId");
            int count = 0;
                while (games.next()){
                    String gameName = games.getString("Game");
                    
                    ResultSet r = statement2.executeQuery("select GameId, Price, AdminId from Game where Name='"+gameName+"'");
                    r.next();
                    int gameId = r.getInt("GameId");
                    float price = r.getFloat("Price");
                    int adminId = r.getInt("AdminId");
                    
                    String query = "insert into Collections(GamerId, GameId) values("+gamerId+","+gameId+")";
                    statement3.executeUpdate(query);
                    System.out.println("##"+query);
                    query = "update Admin set Balance = Balance +"+price+" where AdminId="+adminId;
                    statement3.executeUpdate(query);
                    System.out.println("##"+query);
                    count++;
                }
            
                String q = "update Gamer set Balance = Balance -"+totalCost+" where Username='"+username+"'";
            statement3.executeUpdate(q);
            System.out.println("## "+q);
            statement3.executeUpdate("truncate table cart");

                if (count >0) {
                    JOptionPane.showMessageDialog (null, "Purchase successfully completed. Thank you.", "Title", JOptionPane.INFORMATION_MESSAGE);
                }else{
                    JOptionPane.showMessageDialog (null, "Your cart is empty. Add items to cart.", "Title", JOptionPane.INFORMATION_MESSAGE);
                }

               } catch (Exception e) {
               
                //JOptionPane.showMessageDialog (null, "You already own one or more games in cart", "Title", JOptionPane.INFORMATION_MESSAGE);
             }          
            
            fillCart();
        }else{
            JOptionPane.showMessageDialog (null, "Balance insufficient to make purchases. Please deposit.", "Title", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_purchaseButtonActionPerformed

    private void depositButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_depositButtonActionPerformed
        // TODO add your handling code here:    
           try{ 
            float depositAmount = Float.parseFloat(depositTF.getText().trim());  
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");  
            Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=gamestoredb;integratedSecurity=true");  
            Statement statement = connection.createStatement();  
            String query = "update Gamer set Balance = Balance +"+depositAmount+" where Username='"+username+"'";
            statement.executeUpdate(query);
            System.out.println("## "+query);
            JOptionPane.showMessageDialog (null, "Your deposit was successfully made.", "Title", JOptionPane.INFORMATION_MESSAGE);
            depositTF.setText("");
               } catch (NumberFormatException ex) {
               
               }
               catch (Exception ex) 
               {  
               }
        
    }//GEN-LAST:event_depositButtonActionPerformed

    private void clearCartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearCartButtonActionPerformed
        // TODO add your handling code here:
        clearCart();
        fillCart();
    }//GEN-LAST:event_clearCartButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GamerPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GamerPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GamerPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GamerPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GamerPage(username).setVisible(true);
            }
        });
    }

        void clearCart(){
           try{
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");  
            Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=gamestoredb;integratedSecurity=true");  
            Statement statement = connection.createStatement();
            
            statement.executeUpdate("truncate table cart");              
            } catch (Exception ex) {}
    }
    
      float fillCart(){
          float totalCost=0;
           try {  
             Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");  
             Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=gamestoredb;integratedSecurity=true");  
   
               Statement statement = connection.createStatement();  
               Statement statementx = connection.createStatement(); 
               
             ResultSet rs = statement.executeQuery("SELECT  * FROM Cart");  
             ResultSetMetaData  rsmetadata = rs.getMetaData(); 
              int  columns = rsmetadata.getColumnCount();   
              DefaultTableModel dtm = new DefaultTableModel(); 
              Vector columns_name=new Vector();
              Vector data_rows=new Vector();
              for(int  i= 1; i < columns+1; i++)  
                {             
                        columns_name.addElement (rsmetadata.getColumnLabel(i));  
                }                 
              
              dtm.setColumnIdentifiers(columns_name);
                   while (rs.next())  
           {  
               data_rows = new Vector(); 
               for (int j = 1; j <columns+1; j++)  
               {  
                   data_rows.addElement(rs.getString(j)) ;
               }  
               dtm.addRow(data_rows);  
               
       } 
           
           ResultSet resultSet = statementx.executeQuery("select sum(Price) as TotalCost from Cart");
           
           System.out.println("## "+"select sum(Price) as TotalCost from Cart");
           resultSet.next();
           data_rows = new Vector();
           data_rows.addElement("-");
           data_rows.addElement("Total");
           totalCost = resultSet.getFloat("TotalCost");
           data_rows.addElement(String.valueOf(totalCost));
           dtm.addRow(data_rows); 
           
          jTable1.setModel(dtm);
          
           jScrollPane5.revalidate();
           jScrollPane5.repaint();
             
         } catch (Exception e) {  
             e.printStackTrace();  
         }
               
       return totalCost;
    }
      
     void loadCollection(){
            try {  
             Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");  
             Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=gamestoredb;integratedSecurity=true");  
   
               Statement statement = connection.createStatement();  
               Statement s = connection.createStatement();
               
               ResultSet r = s.executeQuery("Select GamerId from Gamer where Username='"+username+"'");
               r.next();
               int gamerId = r.getInt("GamerId");
               
              String query = "SELECT * FROM Game where GameId in (select GameId from Collections where GamerId="+gamerId+")";
             ResultSet rs = statement.executeQuery(query);
             System.out.println("## "+query);
             ResultSetMetaData  rsmetadata = rs.getMetaData(); 
                
             jPanel7.removeAll();
              while (rs.next()) {
                  String name, imageDirectory, price;
                  int gameId;
                  name = rs.getString("Name");
                  imageDirectory = rs.getString("ImageDirectory");
                  price = Float.toString(rs.getFloat("Price"));
                  gameId = rs.getInt("GameId");
                  
                  Statement st = connection.createStatement();  
                  query = "select avg(Rating) as AverageRating from Review where GameId="+gameId;
                  
                  ResultSet result = st.executeQuery(query);
                  result.next();
                  int rating = result.getInt("AverageRating");
                  
                 BufferedImage bufferedImage = null;
                    try {
                        bufferedImage = ImageIO.read(new File(imageDirectory));
                    } catch (IOException ex){
                    Logger.getLogger(Products.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                Image scaledImage = (Image) bufferedImage.getScaledInstance(147, 90, Image.SCALE_SMOOTH);
                JLabel jLabel = new JLabel(new ImageIcon(scaledImage));
                
                CollectionPanel x = new CollectionPanel(jLabel, name, rating, gamerId, this);
                
                jPanel7.add(x);
                jPanel7.revalidate();
                jPanel7.repaint();
        
              }
 
          }
           catch (Exception e) {  
             e.printStackTrace();  
         }
    
    }
      
    float setBalance(){
        float balance=0;
            try{                 
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");  
            Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=gamestoredb;integratedSecurity=true");  
            Statement statement = connection.createStatement();  
                         
             ResultSet accountBalance = statement.executeQuery("select Balance from Gamer where Username='"+username+"'");
             accountBalance.next();
             balance = accountBalance.getFloat("Balance");
             balanceTP.setText(String.valueOf(balance));
             balanceTP.setEditable(false);
               } catch (Exception ex) 
               {  
               }
            
         return balance;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane balanceTP;
    private javax.swing.JButton clearCartButton;
    private javax.swing.JButton depositButton;
    private javax.swing.JTextField depositTF;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton purchaseButton;
    // End of variables declaration//GEN-END:variables
}
