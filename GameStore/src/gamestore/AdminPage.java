/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gamestore;

import static com.sun.xml.internal.fastinfoset.alphabet.BuiltInRestrictedAlphabets.table;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextField;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Shadman
 */
public class AdminPage extends JFrame {
     
    static String username="";
    static int adminId;
    static boolean order1;
    static boolean order2;
    /**
     * Creates new form AdminPage
     */
    public AdminPage(String userName, int adminId) {
        initComponents();
        setTitle("Gamestore-AdminPage");
        this.username = userName;
        this.adminId = adminId;
        
        setBalance();
        this.setLocationRelativeTo(null);
        jPanel6.setLayout(new GridLayout(0,3,2, 20));
          
          showProducts();
          updateGamerInfo();
          updateGameInfo();
             jScrollPane5.setSize(new Dimension(jPanel5.getWidth(),jScrollPane5.getHeight()));
          
               jTabbedPane1.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                showProducts();
                updateGamerInfo();
                updateGameInfo();
                System.out.println();
            }
           });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        nameTF = new javax.swing.JTextField();
        genreTF = new javax.swing.JTextField();
        priceTF = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        processorTF = new javax.swing.JTextField();
        osTF = new javax.swing.JTextField();
        ramTF = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        memoryTF = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        ratingTF = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTable6 = new javax.swing.JTable();
        fetchButton = new javax.swing.JButton();
        ownerTF = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        ownedTF = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jPanel6 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTable7 = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        earningTP = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        priceTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceTFActionPerformed(evt);
            }
        });

        jLabel5.setText("Name");

        jLabel6.setText("Genre");

        jLabel7.setText("Price");

        jLabel1.setText("Processor");

        jLabel3.setText("OS");

        jLabel4.setText("RAM");

        jLabel8.setText("Memory");

        jLabel9.setText("Rating");

        jTable6.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane8.setViewportView(jTable6);

        fetchButton.setText("Fetch");
        fetchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fetchButtonActionPerformed(evt);
            }
        });

        jLabel10.setText("Games Owned by");

        jLabel12.setText("Owner of");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(nameTF, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel5)))
                .addGap(16, 16, 16)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(genreTF, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(priceTF, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, 12)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(processorTF, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addGap(60, 60, 60))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(osTF, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(ramTF, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGap(91, 91, 91)
                                .addComponent(fetchButton)))
                        .addGap(18, 18, 18)))
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(memoryTF, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(43, 43, 43)))
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ratingTF, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel10))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(ownerTF, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                        .addComponent(ownedTF, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(21, 21, 21))
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane8))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel9)
                    .addComponent(jLabel8)
                    .addComponent(jLabel10)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(genreTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(priceTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(processorTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(osTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ramTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ratingTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(memoryTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ownedTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ownerTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addComponent(fetchButton)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Search game/gamer", jPanel1);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 908, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 457, Short.MAX_VALUE)
        );

        jScrollPane5.setViewportView(jPanel6);

        jButton2.setText("Add new game");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 867, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(325, 325, 325)
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2))
        );

        jTabbedPane1.addTab("Products", jPanel5);

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(jTable3);

        jTabbedPane2.addTab("Top Rated", jScrollPane4);

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(jTable4);

        jTabbedPane2.addTab("Top Priced", jScrollPane6);

        jTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane7.setViewportView(jTable5);

        jTabbedPane2.addTab("Most Reviewed", jScrollPane7);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable2);

        jTabbedPane2.addTab("Top Sales", jScrollPane3);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 867, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Game Statistics", jPanel2);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jTabbedPane3.addTab("Number of Games bought", jScrollPane2);

        jTable7.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane9.setViewportView(jTable7);

        jTabbedPane3.addTab("Gamer account balance", jScrollPane9);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 867, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Gamer Statistics", jPanel3);

        jLabel2.setText("Total Amount(TK): ");

        jScrollPane1.setViewportView(earningTP);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(265, 265, 265)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(249, 249, 249)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(469, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(234, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Earnings", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        new NewGame(username, adminId).setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void fetchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fetchButtonActionPerformed
        // TODO add your handling code here:
        fetchQueryInfo();
    }//GEN-LAST:event_fetchButtonActionPerformed

    private void priceTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_priceTFActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminPage(username, adminId).setVisible(true);
            }
        });
    }
    
    
    void showProducts() 
    {
            
          jPanel6.removeAll();
        
          try {  
             Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");  
             Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=gamestoredb;integratedSecurity=true");  
   
               Statement statement = connection.createStatement();  
               
             ResultSet rs = statement.executeQuery("SELECT  * FROM Game");  
             ResultSetMetaData  rsmetadata = rs.getMetaData(); 
             int columns = rsmetadata.getColumnCount();   

              while (rs.next()) {
                  String name, imageDirectory, price;
                  int gameId;
                  name = rs.getString("Name");
                  imageDirectory = rs.getString("ImageDirectory");
                  price = Float.toString(rs.getFloat("Price"));
                  gameId = rs.getInt("GameId");
                  
                  Statement s = connection.createStatement();  
                  String query = "select avg(Rating) as AverageRating from Review where GameId="+gameId;
                  
                  ResultSet r = s.executeQuery(query);
                  r.next();
                  int rating = r.getInt("AverageRating");
                  
                  
                 BufferedImage bufferedImage = null;
                    try {
                        bufferedImage = ImageIO.read(new File(imageDirectory));
                    } catch (IOException ex){
                    Logger.getLogger(Products.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                Image scaledImage = (Image) bufferedImage.getScaledInstance(147, 90, Image.SCALE_SMOOTH);
                JLabel jLabel = new JLabel(new ImageIcon(scaledImage));
                
                ProductPanel x = new ProductPanel(jLabel, name, price, rating, this, 0);
                
                jPanel6.add(x);
                jPanel6.revalidate();
                jPanel6.repaint();
        
              }
              
          }
           catch (Exception e) {  
             e.printStackTrace();  
         }
    }
    
    
      
      private void fetchQueryInfo()
      {
                 try    
                 {  
                        Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");  
                        Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=gamestoredb;integratedSecurity=true");  
   
                        Statement statement = connection.createStatement();  
               
                        String baseQuery = "select Name, Genre, Price, avg(Rating) as Rating, Processor_GHz, OS, RAM_GB, Memory_MB "
                                + "from Game join Requirement "
                                + "on Game.ReqId = Requirement.ReqId "
                                + "left join Review on Game.GameId = Review.GameId "
                                + "group by Name, Genre, Price, Processor_GHz, OS, RAM_GB, Memory_MB, Game.GameId";
                        
                        
                        HashMap <String, JTextField> allTextfields = new HashMap();
                        allTextfields.put("Name", nameTF);
                        allTextfields.put("Genre", genreTF); 
                        allTextfields.put("Price", priceTF); 
                        allTextfields.put("Processor_GHz", processorTF); 
                        allTextfields.put("OS", osTF); 
                        allTextfields.put("RAM_GB", ramTF); 
                        allTextfields.put("Memory_MB", memoryTF); 
                        allTextfields.put("avg(Rating)", ratingTF); 
                        allTextfields.put("Owner of", ownerTF);
                        allTextfields.put("Owned by", ownedTF);
                       int k=1;
                       for (Map.Entry<String, JTextField> entry : allTextfields.entrySet()) {
                           
                           String attributeName = entry.getKey();
                           JTextField textfield = entry.getValue();
                           
                           String data = textfield.getText();
                           
                           if (!textfield.getText().trim().isEmpty()) {
                               if (k==1) 
                                   baseQuery += " having ";
                               else 
                                   baseQuery += " and ";
                               
                               if (attributeName=="Name") {
                                   baseQuery += attributeName +" like '"+data+"%'";
                               }
                               else if(attributeName=="Genre"){
                                   baseQuery += attributeName + "='"+data+"'";
                               }
                               else if(data.contains("-")){
                                   String part[] = data.split("-");
                                   String data1 = part[0];
                                   String data2 = part[1];
                                  // if (attributeName=="Memory_MB" || attributeName =="Processor_GHz") {
                                       //baseQuery +=  (attributeName + ">='"+data1+"' and "+attributeName+"<='"+data2+"'").replace("'", "");
                                   //}else{
                                        //baseQuery += attributeName + ">='"+data1+"' and "+attributeName+"<='"+data2+"'";
                                        baseQuery +=  (attributeName + " between "+data1+" and "+data2);
                                   //}
                               }
                               else if (attributeName=="Owned by") {
                                   baseQuery += "Game.GameId in (select GameId from Collections "
                                           + "where GamerId=(select GamerId from Gamer where Username='"+data+"'))";
                               }
                               else if (attributeName=="Owner of") {
                                   baseQuery ="select GamerId, Username from Gamer "
                                           + "where GamerId in (select GamerId from Collections "
                                           + "where GameId =(select GameId from Game where Name='"+data+"'))";
                                   break;         
                               }
                               else{
                                   baseQuery += attributeName + "="+data+"";
                               }
                               k++;           
                             }
                     } 
                        ResultSet rs = statement.executeQuery(baseQuery);
                        System.out.println("## "+baseQuery);
                        ResultSetMetaData  rsmetadata = rs.getMetaData();
             
                        int  columns = rsmetadata.getColumnCount();

                        DefaultTableModel dtm = new DefaultTableModel(); 
                        Vector columns_name=new Vector();
                        Vector data_rows=new Vector();
                        for(int  i= 1; i < columns+1; i++)  
                            {             
                                columns_name.addElement (rsmetadata.getColumnLabel(i));  
                            }                 
              
                        dtm.setColumnIdentifiers(columns_name);
                        while (rs.next())  
                         {  
                            data_rows = new Vector(); 
                            for (int j = 1; j <columns+1; j++)  
                            {  
                             data_rows.addElement(rs.getString(j)) ;
                            }  
                             dtm.addRow(data_rows);  
                        } 
       
                    jTable6.setModel(dtm);
          
                    jScrollPane8.revalidate();
                    jScrollPane8.repaint();
             
                } catch (Exception e) {  
                    e.printStackTrace();  
                }
        }

     private void updateGameInfo() 
     {                                         
                                
         // TAB ONE
         try {  
             Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");  
             Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=gamestoredb;integratedSecurity=true");  
   
               Statement statement = connection.createStatement();  
               
               String query = "select Name, count(Collections.GameId) as Quantity_Sold from" +
                          " Game left join Collections "
                       + "on Game.GameId = Collections.GameId group by Game.GameId, Name "
                       + "order by count(Collections.GameId) desc ";
             
             ResultSet rs = statement.executeQuery(query);  
             
             System.out.println("## "+query);
             
             ResultSetMetaData  rsmetadata = rs.getMetaData();
             
              int  columns = rsmetadata.getColumnCount();   
              DefaultTableModel dtm = new DefaultTableModel(); 
              Vector columns_name=new Vector();
              Vector data_rows=new Vector();
              for(int  i= 1; i < columns+1; i++)  
                {             
                        columns_name.addElement (rsmetadata.getColumnLabel(i));  
                }                 
              
               dtm.setColumnIdentifiers(columns_name);
                   while (rs.next())  
                {  
                    data_rows = new Vector(); 
                    for (int j = 1; j <columns+1; j++)  
                    {  
                        data_rows.addElement(rs.getString(j)) ;
                    }  
                    dtm.addRow(data_rows);  
                } 
       
            jTable2.setModel(dtm);
          
          jScrollPane3.revalidate();
          jScrollPane3.repaint();
             
         } catch (Exception e) {  
             e.printStackTrace();  
         }
         
         // TAB TWO
                                    try {  
             Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");  
             Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=gamestoredb;integratedSecurity=true");  
   
               Statement statement = connection.createStatement();  
               
               String query = "select Name, avg(Review.Rating) as Rating "
                       + "from Game left join Review on Game.GameId = Review.GameId "
                       + "group by Game.GameId, Name order by avg(Review.Rating) desc ";
             
             ResultSet rs = statement.executeQuery(query);
             
             System.out.println("## "+query);
             
             ResultSetMetaData  rsmetadata = rs.getMetaData();
             
              int  columns = rsmetadata.getColumnCount();   
              DefaultTableModel dtm = new DefaultTableModel(); 
              Vector columns_name=new Vector();
              Vector data_rows=new Vector();
              for(int  i= 1; i < columns+1; i++)  
                {             
                        columns_name.addElement (rsmetadata.getColumnLabel(i));  
                }                 
              
               dtm.setColumnIdentifiers(columns_name);
                   while (rs.next())  
                {  
                    data_rows = new Vector(); 
                    for (int j = 1; j <columns+1; j++)  
                    {  
                        data_rows.addElement(rs.getString(j)) ;
                    }  
                    dtm.addRow(data_rows);  
                } 
       
            jTable3.setModel(dtm);
          
          jScrollPane4.revalidate();
          jScrollPane4.repaint();
             
         } catch (Exception e) {  
             e.printStackTrace();  
         }
                                    
         // TAB THREE
         
                                             try {  
             Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");  
             Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=gamestoredb;integratedSecurity=true");  
   
               Statement statement = connection.createStatement();  
               
               String query = "select Name, Price "
                       + "from Game order by Price desc";
               
               System.out.println("## "+query);
             
             ResultSet rs = statement.executeQuery(query);  
             ResultSetMetaData  rsmetadata = rs.getMetaData();
             
              int  columns = rsmetadata.getColumnCount();   
              DefaultTableModel dtm = new DefaultTableModel(); 
              Vector columns_name=new Vector();
              Vector data_rows=new Vector();
              for(int  i= 1; i < columns+1; i++)  
                {             
                        columns_name.addElement (rsmetadata.getColumnLabel(i));  
                }                 
              
               dtm.setColumnIdentifiers(columns_name);
                   while (rs.next())  
                {  
                    data_rows = new Vector(); 
                    for (int j = 1; j <columns+1; j++)  
                    {  
                        data_rows.addElement(rs.getString(j)) ;
                    }  
                    dtm.addRow(data_rows);  
                } 
       
            jTable4.setModel(dtm);
          
          jScrollPane6.revalidate();
          jScrollPane6.repaint();
             
         } catch (Exception e) {  
             e.printStackTrace();  
         }
                                             
          // TAB FOUR 
           
                                             try {  
             Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");  
             Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=gamestoredb;integratedSecurity=true");  
   
               Statement statement = connection.createStatement();  
               
               String query = "select Name, count(Review.ReviewId) as Reviews from "
                       + "Game join Review on Game.GameId = Review.GameId "
                       + "group by Game.GameId, Name order by count(Review.ReviewId) desc";
               
               System.out.println("## "+query);

             
             ResultSet rs = statement.executeQuery(query);  
             ResultSetMetaData  rsmetadata = rs.getMetaData();
             
              int  columns = rsmetadata.getColumnCount();   
              DefaultTableModel dtm = new DefaultTableModel(); 
              Vector columns_name=new Vector();
              Vector data_rows=new Vector();
              for(int  i= 1; i < columns+1; i++)  
                {             
                        columns_name.addElement (rsmetadata.getColumnLabel(i));  
                }                 
              
               dtm.setColumnIdentifiers(columns_name);
                   while (rs.next())  
                {  
                    data_rows = new Vector(); 
                    for (int j = 1; j <columns+1; j++)  
                    {  
                        data_rows.addElement(rs.getString(j)) ;
                    }  
                    dtm.addRow(data_rows);  
                } 
       
            jTable5.setModel(dtm);
          
          jScrollPane7.revalidate();
          jScrollPane7.repaint();
             
         } catch (Exception e) {  
             e.printStackTrace();  
         }
    }   
    
      private void updateGamerInfo()
      {
                 try    
                 {  
                        Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");  
                        Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=gamestoredb;integratedSecurity=true");  
   
                        Statement statement = connection.createStatement();  
                    
                        String query = "select Gamer.GamerId, Username, count(Collections.GamerId) as Games_Bought "
                                + "from Gamer left join Collections "
                               + "on Gamer.GamerId = Collections.GamerId group by Gamer.Username, Gamer.GamerId";
                       
                        if (order1==true) 
                            query += " order by count(Collections.GamerId) desc";

                        ResultSet rs = statement.executeQuery(query);
                        
                        System.out.println("## "+query);
                        
                        ResultSetMetaData  rsmetadata = rs.getMetaData();
             
                        int  columns = rsmetadata.getColumnCount();   
                        DefaultTableModel dtm = new DefaultTableModel(); 
                        Vector columns_name=new Vector();
                        Vector data_rows=new Vector();
                        for(int  i= 1; i < columns+1; i++)  
                            {             
                                columns_name.addElement (rsmetadata.getColumnLabel(i));  
                            }                 
              
                        dtm.setColumnIdentifiers(columns_name);
                        while (rs.next())  
                         {  
                            data_rows = new Vector(); 
                            for (int j = 1; j <columns+1; j++)  
                            {  
                             data_rows.addElement(rs.getString(j)) ;
                            }  
                             dtm.addRow(data_rows);  
                        } 
       
                    jTable1.setModel(dtm);
       
                    jScrollPane2.revalidate();
                    jScrollPane2.repaint();
             
                } catch (Exception e) {  
                    e.printStackTrace();  
                }
                 
                 
                   try    
                 {  
                        Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");  
                        Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=gamestoredb;integratedSecurity=true");  
   
                        Statement statement = connection.createStatement();  
               
                        String query = "select GamerId, Username, Balance as AccountBalance from Gamer";
                        
                        if (order2 == true) {
                          query += " order by Balance desc";
                     }
                        
                        ResultSet rs = statement.executeQuery(query);  
                        ResultSetMetaData  rsmetadata = rs.getMetaData();
             
                        int  columns = rsmetadata.getColumnCount();   
                        DefaultTableModel dtm = new DefaultTableModel(); 
                        Vector columns_name=new Vector();
                        Vector data_rows=new Vector();
                        for(int  i= 1; i < columns+1; i++)  
                            {             
                                columns_name.addElement (rsmetadata.getColumnLabel(i));  
                            }                 
              
                        dtm.setColumnIdentifiers(columns_name);
                        while (rs.next())  
                         {  
                            data_rows = new Vector(); 
                            for (int j = 1; j <columns+1; j++)  
                            {  
                             data_rows.addElement(rs.getString(j)) ;
                            }  
                             dtm.addRow(data_rows);  
                        } 
       
                    jTable7.setModel(dtm);
                     
                    jScrollPane9.revalidate();
                    jScrollPane9.repaint();
             
                } catch (Exception e) {  
                    e.printStackTrace();  
                }
        }

     
         float setBalance(){
         float balance=0;
            try{                 
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");  
            Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=gamestoredb;integratedSecurity=true");  
            Statement statement = connection.createStatement();  
                         
             ResultSet accountBalance = statement.executeQuery("select Balance from Admin where Username='"+username+"'");
             accountBalance.next();
             balance = accountBalance.getFloat("Balance");
             earningTP.setText(String.valueOf(balance));
             earningTP.setEditable(false);
               } catch (Exception ex) 
               {  
               }
            
         return balance;
        }
        
         

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane earningTP;
    private javax.swing.JButton fetchButton;
    private javax.swing.JTextField genreTF;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private static javax.swing.JPanel jPanel5;
    private static javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private static javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTable jTable5;
    private javax.swing.JTable jTable6;
    private javax.swing.JTable jTable7;
    private javax.swing.JTextField memoryTF;
    private javax.swing.JTextField nameTF;
    private javax.swing.JTextField osTF;
    private javax.swing.JTextField ownedTF;
    private javax.swing.JTextField ownerTF;
    private javax.swing.JTextField priceTF;
    private javax.swing.JTextField processorTF;
    private javax.swing.JTextField ramTF;
    private javax.swing.JTextField ratingTF;
    // End of variables declaration//GEN-END:variables
}


